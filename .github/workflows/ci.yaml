name: techchallengeapp-ci
on:
  push:
    branches:
      - feature/ci-pipeline-workflow

env:
  stackname:        'servian-techchallengeapp-fargate-api'
  albstackname:     'servian-alb'
  clusterstackname: 'servian-fargate-cluster'
  dbsecretname:     'topplar-database'
  dbstackname:      'servian-rds'
  hostname:         'techchallengeapp'
  healthcheckpath:  '/healthcheck'
  s3arn           : 'arn:aws:s3:::servian-env-files/.env'

jobs:
  check-application:
    name: Build Image
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::511542799717:role/uat-api-github-actions-role-Role-1HCXFDT7A09C5
          aws-region: ap-southeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      
      - name: Deploy to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ env.stackname }}
          template: /infra/templates/cluster/fargate/ecs.yaml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >-
            AlbStackName=${{ env.albstackname }},
            ClusterStackName=${{ env.clusterstackname }},
            DbStackName=${{ env.dbstackname }},
            Hostname=${{ env.hostname }},
            DockerImage=${{ steps.build-image.outputs.image }},
            HealthCheckPath=${{ env.healthcheckpath }},
            S3Arn=${{ env.s3arn }},